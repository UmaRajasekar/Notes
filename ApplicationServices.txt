SQS -> Simple Queue Service
This is the first ever AWS service publically available.
Amazon SQS is a web service that gives you access to message queue that can be used to store messages while waiting for a computer to process them.
Amazon SQS is a distributed queue system that enables web service application to quickly and reliably queue messages that one component in the application generates to be consumed by another component. A queue is a temporary repository for messages that are awaiting processing.
In simple words, SQS is a way of assigning jobs.
We can also have auto scaling group configured with SQS, so that ec2 instance is increased/decreased based on the messages in the queue.
This is pull based systems.
Using SQS, you can decouple the components of an application so that they can run independently, easing message management between components.
Any components of a distribuited application can store messages. Messages can be upto 256KB of text in any format. Any component can later retrieve the messages programmatically using the Amazon SQS API
The queue act as a buffer between the components producing and saving data, and the components recieving the data for processing.
This means the queue resolves issues that arises if the producers is producing the work faster that the consumer can process it, or if the producer or consumer are intermittenly connected to the network.
There are two types of queues:-
-> Standard Queue
-> First In First Out(FIFO queue)

Amazon SQS offers standard as the default queue types.
A standard queue lets you have a nearly unlimited number of transaction per second.
Standard queues gurantee that message is delivered atleast once.
However occasionally(because of the highly-distributed architecture that allows high throughput), more than one copy of a message might be delivered out of order. Standard queues provide best effort ordering which ensures that messages are generally delivered in the same order as they are sent.

The FIFO queue complements the standard queue. The most important features of this queue type are FIFO(first in first out) delivery and exactly once processing: The order in which messages are sent and recieved is strictly preserved and the message is delivered once and remains available until a consumer process and deletes it; duplicates are not introduces in the queue. FIFO queues also support message groups that allow multiple ordered message groups within a single queue. FIFO queues are limited to 300 transaction per second, but have all the capabilities of the standard queue.
Messages can be kept in the queue from 1 minute to 14 days
Default retention period is 4 days.
SQS guarantees that your messages will be processed at least once.

SQS Visiblity Timeout.
The visibility timeout is the amount of time that the message is invisible in the SQS queue after a reader picks up the message. Provided the job is processed before the visibility time out expires, the messages will then be deleted from the queue. If the job is not processed  within that time, the message will become visible again and another reader will process it. This could result in the same message being delivered twice.
Default visibility timeout is 30 seconds.
Increase it if your tasks takes > 30 seconds.
Maximum is 12 hours.

SQS Long Polling
Amazon SQS long polling is the way to retrive messages from your Amazon SQS queues.
While the regular short polling returns immediately (even if the message queue is being polled is empty), long polling doesn't return a response until a message arrives in the message queue, or the long poll time out.
As such, long polling can save your money.

SWF-> Simple WorkFlow Service

Amazon Simple Workflow Service is a web service that makes it easy to coordinate work across distributed application components. Amazon SWF enables application for a range of use cases, including media processing, web application back-ends, business process workflows, and analytics pipelines, to be designed as a coordination of tasks.
Tasks represent invokations of various processing steps in an application which can be performed by executable code, web service calls, human actions and scripts.

SWF Workers
-> Workers are programs that interact with Amazon SWF to get tasks, process recieved tasks, and return the results.
SWF Decider
-> Decider is a program that controls the coordination of tasks, ie. their ordering, concurrency, and scheduling according to the application logic.

SWF Workers and Deciders
The workers and deciders can run on cloud infrastructure, such as Amazon EC2, or on machines behind firewalls. Amazon SWF brokers the interaction between workers and the decider. 
It allows the decider to get consistent views into the progress of tasks and to initiate new tasks in an ongoing manner.
At the same time, Amazon SWF stores tasks, assigns them to workers when they are ready, and monitors their progress. 
It ensures that tasks is never duplicated.(main difference with SQS)
Since Amazon SWF maintain the application's state durably, workers and deciders dont have to keep track of execution state.
They can run independently and scale quickly.

SWF Domain
Your workflow and activity types and the workflow execution itself are all scoped to a domain. 
Domains isolate a set of types, executions, and task lists from others within the same account.
You can register a domain by using the AWS Management Console or by using the RegisterDomain action in the Amazon SWF API.
Maximum length of workflow can be upto 1 year.
SWF is task oriented API whereas SNS is message oriented API.
SWF task is never duplicated whereas SNS might duplicate messages.
Amazon SWF keeps track of all the tasks and events in an application. With Amazon SQS, you need to implement your application level tracking, especially if your application uses multiple queues.


Amazon Simple Notification Service(SNS) is a web service that makes it easy to setup, operate and send notification from the cloud. It provides developers with a highly scalable, flexible and cost-effective capability to publish messages from an application and immediately deliver them to subscribers and other applications.
Besides, pushing cloud notifications directly to mobile devices, Amazon SNS can also deliver notifications by SNS text message or emial, to Amazon Simple Queue Service(SQS) queues, or to any HTTP endpoint. SNS notifications can also trigger Lambda functions.
When a message is published to an SNS topic that has a Lambda function subscribed to it, the Lambda function is invoked with the payload of the published message. 
The Lambda function recieves the message payload as an input parameters and can manipulate the information in the message, publish the message to other SNS topics, or send message to other AWS services.
SNS allows you to group multiple recipients using topics.
A topic is an "access point" for allowing recipients to dynamically subscribe for identical copies of the same notification. One topic can support deliveries to multiple endpoints-- you can group together iOS, Anroid and sMS recipients. When you publish once to a topic, SNS delivers appropriately formatted copies of your message to end users.
To prevent message being lost, all messages published to Amazon SNS are stored redundantly across multiple availability zones.
SNS Benefits:-
-> Instantaneous, push-based delivery (no polling).
-> Simple APIs and easy integration with applications.
-> Flexible message delivery over multiple transport protocol.
-> Inexpensive, pay-as-you-go model with no upfront costs
-> Web-based AWS Management Console offers the simplicity of a point-and-click interface

Difference between SNS Vs SQS
-> Both messaging services in AWS
-> SNS- Push
-> SQS- Pull

Elastic Transcoder
-> Media Transcoder in the cloud.
-> Convert media files from thier original source format in to different formats that will play on the smartphones,tablets, PC's etc.
-> Provides transcoding presets for popular output formats, which means you dont need to guess about which settings work best on particular devices.
-> Pay based on the minute that you transcode and the resolution that you transcode.

API Gateway
-> Amazon API Gateway is a fully managed service that makes it easy for developers to publish, maintain, monitor and secure APIs at any scale. 
-> With a few clicks in the AWS management console, you can create an API that acts as a "front door" for applications to access data, business logic, or functionality from your backend services, such as application running on Amazon Elastic Compute Cloud(Amazon EC2), code running on AWS Lambda, or any web applications.
API Gateway Caching:-
-> You can enable API caching in Amazon API Gateway to cache your endpoints response. With caching, you can reduce number of calls made to your endpoint and also improve latency of the requests to your API. 
-> When you enable caching for a stage, API Gateway caches responses from your endpoint for a specified time-to-live(TTL) period, in seconds. 
-> API Gateway then responds to the request by looking up the endpoint response from the cache instead of making a request to your endpoint.
What API Gateway Do?
-> Low Cost and efficiency
-> Scales Effortlessly
-> You can throttle requests to prevent attacks
-> Connect to CloudWatch to log all the request.
Same Origin Policy
In computing, the same origin policy is an important concept in the web application security model. Under the policy, a web browser permits scripts contained in a first web page to access data in the second web page, but only if both web pages have the same origin.
Cross Origin Resource Sharing
-> CORS is one way the server at the other end(not the client code in the browser) can relax the same origin policy.
-> CORS is a mechanism that allows restricted resources(e.g fonts) on a web page to be requested from another domain outside the domain from which the first resource was served.

Kinesis 101
-> Streaming data is a data that is generated continously by thousands of data sources, which typically send in the data records simultaneously, and in small size(order of kilobytes)
It could be
-> Purchases from the online store
-> Stock Prices
-> Game data(as the game plays)
-> Social network data
-> Geospacial data
-> iOT sensor data

Amazon Kinesis is a platform on AWS to send your streaming data too. Kinesis makes it easy to load and analyse steaming data, and also providing the ability to build your own custom application for your business needs.
There are three core Kinesis Services
a. Kinesis Streams
b. Kinesis Firehose
c. Kinesis Analytics
Kinesis streams
-> Kinesis streams consist of shards
  -> 5 transactions per second for reads, up to a maximum total data read rate of 2 MB per second and up to 1000 records per second for writes, upto a total writes of 1 MB per second.(including partition keys)
  -> The data capacity of your stream is the function of the number of shards that you specify for the stream. The total capacity of the stream is the sum of the capacities of the shards.
  
The main difference of using Kinesis Firehose and the Kinesis stream is that you need to manage/manaually add shards. Firehose automatically scales up for storage of data, performs lambda on the data and then helps in transferring that data to S3, Amazon Redshift and Elastic search clusters

Kinesis Analytics
-> This is combination of Analystics with the firehose where it allows you to write SQL queries on the data available in the firehose and then allows storage directly into Redshift, whereas using Kinesis firehose to store data in the Amazon Redshift, first you need to store data in the S3 bucket.

SWF Actors
-> Workflow Starters
-> Deciders
-> Activity Workers

SNS Subscribers
-> HTTP
-> HTTPS
-> Email
-> Email-JSON
-> SQS
-> Application
-> Lambda
